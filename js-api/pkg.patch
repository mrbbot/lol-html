diff -ruN pkg/lol_html.d.ts pkg2/lol_html.d.ts
--- pkg/lol_html.d.ts	2021-07-18 11:42:02.000000000 +0100
+++ pkg2/lol_html.d.ts	2021-07-18 11:31:34.000000000 +0100
@@ -151,13 +151,14 @@
 * @param {any} handlers
 */
   onDocument(handlers: any): void;
+// PATCH: switched to Promise<void> return types
 /**
 * @param {Uint8Array} chunk
 */
-  write(chunk: Uint8Array): void;
+  write(chunk: Uint8Array): Promise<void>;
 /**
 */
-  end(): void;
+  end(): Promise<void>;
 }
 /**
 */
@@ -194,3 +195,5 @@
 */
   readonly text: string;
 }
+// PATCH: added export
+export function registerPromise(promise: Promise<any>): number;
\ No newline at end of file
diff -ruN pkg/lol_html.js pkg2/lol_html.js
--- pkg/lol_html.js	2021-07-18 11:42:02.000000000 +0100
+++ pkg2/lol_html.js	2021-07-18 11:38:55.000000000 +0100
@@ -1,6 +1,7 @@
+/* eslint-disable */
 let imports = {};
 imports['__wbindgen_placeholder__'] = module.exports;
-imports['env'] = require('env');
+// PATCH: removed 'env'
 let wasm;
 const { TextDecoder, TextEncoder } = require(String.raw`util`);
 
@@ -630,18 +631,19 @@
     onDocument(handlers) {
         wasm.htmlrewriter_onDocument(this.ptr, addHeapObject(handlers));
     }
+    // PATCH: added async/await
     /**
     * @param {Uint8Array} chunk
     */
-    write(chunk) {
+    async write(chunk) {
         var ptr0 = passArray8ToWasm0(chunk, wasm.__wbindgen_malloc);
         var len0 = WASM_VECTOR_LEN;
-        wasm.htmlrewriter_write(this.ptr, ptr0, len0);
+        await wasm.htmlrewriter_write(this.ptr, ptr0, len0);
     }
     /**
     */
-    end() {
-        wasm.htmlrewriter_end(this.ptr);
+    async end() {
+        await wasm.htmlrewriter_end(this.ptr);
     }
 }
 module.exports.HTMLRewriter = HTMLRewriter;
@@ -879,8 +881,28 @@
 const path = require('path').join(__dirname, 'lol_html_bg.wasm');
 const bytes = require('fs').readFileSync(path);
 
+// PATCH: added promises stuff
+const promiseMap = new Map();
+let nextPromiseId = 1; // 0 indicates no promise
+async function await_promise(id) {
+    await promiseMap.get(id);
+    promiseMap.delete(id);
+}
+function registerPromise(promise) {
+    const id = nextPromiseId++;
+    promiseMap.set(id, promise);
+    return id;
+}
+imports['env'] = { await_promise };
+
+// PATCH: switched to Asyncify.Instance
+const Asyncify = require('@mrbbot/asyncify-wasm');
+
 const wasmModule = new WebAssembly.Module(bytes);
-const wasmInstance = new WebAssembly.Instance(wasmModule, imports);
+const wasmInstance = new Asyncify.Instance(wasmModule, imports, {
+    wrappedExports: new Set(['htmlrewriter_write', 'htmlrewriter_end'])
+});
 wasm = wasmInstance.exports;
 module.exports.__wasm = wasm;
-
+// PATCH: added export
+module.exports.registerPromise = registerPromise;
